version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: tenfingers-postgres
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER:-tenfingers_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME:-tenfingers}
      # Performance-Tuning f체r Production
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
      POSTGRES_MAINTENANCE_WORK_MEM: 64MB
      POSTGRES_WORK_MEM: 16MB
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - tenfingers-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-tenfingers_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  backend:
    image: ghcr.io/andreasprang/tenfingers-backend:${IMAGE_TAG:-latest}
    container_name: tenfingers-backend
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-tenfingers}
      DB_USER: ${DB_USER:-tenfingers_user}
      DB_PASSWORD: ${DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      PORT: 4000
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
    # Keine externe Port-Bindung - nur intern 체ber Docker-Netzwerk
    expose:
      - "4000"
    networks:
      - tenfingers-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:4000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  frontend:
    image: ghcr.io/andreasprang/tenfingers-frontend:${IMAGE_TAG:-latest}
    container_name: tenfingers-frontend
    restart: always
    depends_on:
      - backend
    # Keine externe Port-Bindung - nur intern 체ber Docker-Netzwerk
    expose:
      - "80"
    networks:
      - tenfingers-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  nginx:
    image: nginx:alpine
    container_name: tenfingers-nginx
    restart: always
    depends_on:
      - frontend
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - certbot_www:/var/www/certbot:ro
      - certbot_conf:/etc/letsencrypt:ro
    networks:
      - tenfingers-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  certbot:
    image: certbot/certbot:latest
    container_name: tenfingers-certbot
    volumes:
      - certbot_www:/var/www/certbot:rw
      - certbot_conf:/etc/letsencrypt:rw
    # Certbot l채uft nur on-demand, nicht dauerhaft
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - tenfingers-network

volumes:
  postgres_data:
    driver: local
  certbot_www:
    driver: local
  certbot_conf:
    driver: local

networks:
  tenfingers-network:
    driver: bridge
